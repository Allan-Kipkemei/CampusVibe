{"ast":null,"code":"import React, { useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('window'),\n  width = _Dimensions$get.width,\n  height = _Dimensions$get.height;\nvar NotificationsPage = function NotificationsPage(_ref) {\n  var modalVisible = _ref.modalVisible,\n    setModalVisible = _ref.setModalVisible;\n  var slideAnim = useRef(new Animated.Value(width)).current;\n  useEffect(function () {\n    if (modalVisible) {\n      Animated.timing(slideAnim, {\n        toValue: 0,\n        duration: 100,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.timing(slideAnim, {\n        toValue: width,\n        duration: 100,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [modalVisible]);\n  var hideModal = function hideModal() {\n    setModalVisible(false);\n  };\n  return _jsx(View, {\n    children: _jsx(Modal, {\n      animationType: \"none\",\n      transparent: true,\n      visible: modalVisible,\n      onRequestClose: hideModal,\n      children: _jsxs(Animated.View, {\n        style: [styles.modal, {\n          transform: [{\n            translateX: slideAnim\n          }]\n        }],\n        children: [_jsxs(View, {\n          style: styles.header,\n          children: [_jsx(TouchableOpacity, {\n            onPress: hideModal,\n            style: styles.back,\n            children: _jsx(MaterialIcons, {\n              name: \"arrow-back\",\n              size: 25,\n              color: \"#000\"\n            })\n          }), _jsx(Text, {\n            style: styles.sett,\n            children: \"Notifications\"\n          })]\n        }), _jsx(View, {\n          style: styles.body\n        })]\n      })\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  modal: {\n    backgroundColor: 'white',\n    height: height,\n    width: width\n  },\n  header: {\n    flexDirection: 'row',\n    padding: 10,\n    alignItems: 'center'\n  },\n  back: {\n    marginHorizontal: 5\n  },\n  sett: {\n    fontSize: 18,\n    fontWeight: '600',\n    marginHorizontal: 5\n  },\n  body: {\n    position: 'absolute',\n    top: 62,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'white'\n  }\n});\nexport default NotificationsPage;","map":{"version":3,"names":["React","useEffect","useRef","View","Text","Modal","TouchableOpacity","Animated","Dimensions","StyleSheet","MaterialIcons","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","width","height","NotificationsPage","_ref","modalVisible","setModalVisible","slideAnim","Value","current","timing","toValue","duration","useNativeDriver","start","hideModal","children","animationType","transparent","visible","onRequestClose","style","styles","modal","transform","translateX","header","onPress","back","name","size","color","sett","body","create","backgroundColor","flexDirection","padding","alignItems","marginHorizontal","fontSize","fontWeight","position","top","left","right","bottom"],"sources":["C:/Users/Alus/Downloads/Campus-Vibes-V1-main/Campus-Vibes-V1-main/mobile/screens/notifications.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { View, Text, Modal, TouchableOpacity, Animated, Dimensions, StyleSheet } from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nconst { width, height } = Dimensions.get('window');\n\nconst NotificationsPage = ({ modalVisible, setModalVisible }) => {\n  const slideAnim = useRef(new Animated.Value(width)).current;\n\n  useEffect(() => {\n    if (modalVisible) {\n      Animated.timing(slideAnim, { toValue: 0, duration: 100, useNativeDriver: true }).start();\n    } else {\n      Animated.timing(slideAnim, { toValue: width, duration: 100, useNativeDriver: true }).start();\n    }\n  }, [modalVisible]);\n\n  const hideModal = () =>{\n    setModalVisible(false)\n  }\n  return (\n    <View>\n       <Modal animationType=\"none\" transparent={true} visible={modalVisible} onRequestClose={hideModal}> \n          <Animated.View style={[styles.modal, { transform: [{ translateX: slideAnim }] }]}>\n\n          <View style={styles.header}>   \n             <TouchableOpacity onPress={hideModal}  style={styles.back}>\n                 <MaterialIcons name=\"arrow-back\" size={25} color=\"#000\" />\n              </TouchableOpacity>\n              <Text style={styles.sett}>Notifications</Text>\n           </View>\n            {/* Body */}\n            <View style={styles.body}>\n  \n            </View>\n  \n          </Animated.View>\n        </Modal>\n    </View>\n  );\n};\n\n\nconst styles = StyleSheet.create({\n  modal: {\n    backgroundColor: 'white',\n    height: height, width: width\n  },\n  header:{\n    flexDirection: 'row', \n    padding:10, alignItems: 'center'\n  },\n  back: {\n    marginHorizontal:5\n  },\n  sett:{\n     fontSize: 18,\n     fontWeight: '600',\n     marginHorizontal:5\n  },\nbody:{\n    position: 'absolute',\n    top: 62, \n    left:0, right: 0,bottom: 0,\n    backgroundColor: 'white'\n  },\n});\n\nexport default NotificationsPage;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}