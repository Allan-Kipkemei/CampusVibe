{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, query, where, orderBy, limit } from 'firebase/firestore';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nvar firebaseConfig = {\n  apiKey: \"AIzaSyA7JPJ0jkVgBqd_H46H4ODpCuYt6RHU-zI\",\n  authDomain: \"testampus.firebaseapp.com\",\n  projectId: \"testampus\",\n  storageBucket: \"testampus.appspot.com\",\n  messagingSenderId: \"175187994196\",\n  appId: \"1:175187994196:web:df2f335c5922e2ddd1afc1\",\n  measurementId: \"G-BB8S9ZJNWL\"\n};\nvar app = initializeApp(firebaseConfig);\nvar db = getFirestore(app);\nvar postsRef = collection(db, 'posts');\nfunction PostsFetcher() {\n  var dispatch = useDispatch();\n  var campus = useSelector(function (state) {\n    return state.campus;\n  });\n  var currentTimestamp = new Date();\n  var batchNumber = useSelector(getBatchNumber);\n  useEffect(function () {\n    console.log(\"Fetching posts for batch number:\", batchNumber);\n    var startIndex = batchNumber * 10 + 1;\n    console.log(\"Fetching posts starting from index:\", startIndex);\n    var fetchPosts = function () {\n      var _ref = _asyncToGenerator(function* () {\n        var posts;\n        try {\n          var postsQuery = query(postsRef, where('campus', '==', campus), orderBy('time', 'desc'), orderBy('popularity', 'desc'), startAt(startIndex), limit(10));\n          var querySnapshot = yield postsQuery.get();\n          posts = querySnapshot.docs.map(function (doc) {\n            var post = doc.data();\n            var time = (currentTimestamp - post.time.toDate()) / (60 * 60 * 1000);\n            var popularity = post.likes / 2 + post.comments - post.dislikes / 2;\n            return _objectSpread(_objectSpread({}, post), {}, {\n              id: doc.id,\n              time: time,\n              popularity: popularity\n            });\n          });\n          console.log(\"Fetched posts:\", posts);\n          setPosts;\n          var lastVisible = querySnapshot.docs[querySnapshot.docs.length - 1];\n          while (lastVisible) {\n            var nextQuerySnapshot = yield query(postsRef, where('campus', '==', campus), orderBy('time', 'desc'), orderBy('popularity', 'desc'), startAfter(lastVisible), limit(10)).get();\n            if (!nextQuerySnapshot.empty) {\n              var _posts;\n              var nextPosts = nextQuerySnapshot.docs.map(function (doc) {\n                var post = doc.data();\n                var time = (currentTimestamp - post.time.toDate()) / (60 * 60 * 1000);\n                var popularity = post.likes / 2 + post.comments - post.dislikes / 2;\n                return _objectSpread(_objectSpread({}, post), {}, {\n                  id: doc.id,\n                  time: time,\n                  popularity: popularity\n                });\n              });\n              (_posts = posts).push.apply(_posts, _toConsumableArray(nextPosts));\n              lastVisible = nextQuerySnapshot.docs[nextQuerySnapshot.docs.length - 1];\n            } else {\n              lastVisible = null;\n            }\n          }\n        } catch (error) {\n          console.error('Error getting posts:', error);\n        }\n      });\n      return function fetchPosts() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchPosts();\n    return function () {};\n  }, [batchNumber, campus, currentTimestamp, dispatch]);\n  return null;\n}\nexport default PostsFetcher;","map":{"version":3,"names":["initializeApp","getFirestore","collection","query","where","orderBy","limit","useSelector","useDispatch","useEffect","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","db","postsRef","PostsFetcher","dispatch","campus","state","currentTimestamp","Date","batchNumber","getBatchNumber","console","log","startIndex","fetchPosts","_ref","_asyncToGenerator","posts","postsQuery","startAt","querySnapshot","get","docs","map","doc","post","data","time","toDate","popularity","likes","comments","dislikes","_objectSpread","id","setPosts","lastVisible","length","nextQuerySnapshot","startAfter","empty","_posts","nextPosts","push","apply","_toConsumableArray","error","arguments"],"sources":["C:/Users/muguc/OneDrive/Desktop/Campus Vibes/mobile/src/store/firestoreQuery.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\r\nimport { getFirestore, collection, query, where, orderBy, limit } from 'firebase/firestore';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useEffect } from 'react';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyA7JPJ0jkVgBqd_H46H4ODpCuYt6RHU-zI\",\r\n    authDomain: \"testampus.firebaseapp.com\",\r\n    projectId: \"testampus\",\r\n    storageBucket: \"testampus.appspot.com\",\r\n    messagingSenderId: \"175187994196\",\r\n    appId: \"1:175187994196:web:df2f335c5922e2ddd1afc1\",\r\n    measurementId: \"G-BB8S9ZJNWL\"\r\n  };\r\n\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app);\r\nconst postsRef = collection(db, 'posts');\r\n\r\n\r\nfunction PostsFetcher() {\r\n  const dispatch = useDispatch();\r\n  const campus = useSelector(state => state.campus);\r\n  const currentTimestamp = new Date();\r\n  const batchNumber = useSelector(getBatchNumber);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Fetching posts for batch number:\", batchNumber);\r\n    const startIndex = (batchNumber * 10) + 1;\r\n    console.log(\"Fetching posts starting from index:\", startIndex);\r\n\r\n    const fetchPosts = async () => {\r\n      let posts;\r\n      try {\r\n        const postsQuery = query(postsRef, where('campus', '==', campus), orderBy('time', 'desc'), orderBy('popularity', 'desc'), startAt(startIndex), limit(10));\r\n        const querySnapshot = await postsQuery.get();\r\n        posts = querySnapshot.docs.map(doc => {\r\n          const post = doc.data();\r\n          const time = (currentTimestamp - post.time.toDate()) / (60 * 60 * 1000); //  time in hours\r\n          const popularity = (post.likes/2 + post.comments - post.dislikes/2); // calculate the popularity\r\n          return {...post, id: doc.id, time, popularity}; \r\n        });\r\n\r\n        console.log(\"Fetched posts:\", posts);\r\n        setPosts\r\n\r\n        let lastVisible = querySnapshot.docs[querySnapshot.docs.length-1];\r\n        while (lastVisible) {\r\n          const nextQuerySnapshot = await query(postsRef, where('campus', '==', campus), orderBy('time', 'desc'), orderBy('popularity', 'desc'), startAfter(lastVisible), limit(10)).get();\r\n          if (!nextQuerySnapshot.empty) {\r\n            const nextPosts = nextQuerySnapshot.docs.map(doc => {\r\n              const post = doc.data();\r\n              const time = (currentTimestamp - post.time.toDate()) / (60 * 60 * 1000); \r\n              const popularity = (post.likes/2 + post.comments - post.dislikes/2); \r\n              return {...post, id: doc.id, time, popularity};\r\n            });\r\n            posts.push(...nextPosts); \r\n            lastVisible = nextQuerySnapshot.docs[nextQuerySnapshot.docs.length-1];\r\n          } else {\r\n            lastVisible = null; \r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error getting posts:', error);\r\n      }\r\n    }\r\n\r\n   fetchPosts()\r\n\r\n    return () => {\r\n      // Cleanup code if needed\r\n    };\r\n  }, [batchNumber, campus, currentTimestamp, dispatch]);\r\n\r\n  return null;\r\n}\r\n\r\nexport default PostsFetcher;\r\n"],"mappings":";;;;;AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,YAAY,EAAEC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,KAAK,QAAQ,oBAAoB;AAC3F,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,SAAS,QAAQ,OAAO;AAEjC,IAAMC,cAAc,GAAG;EACnBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,2BAA2B;EACvCC,SAAS,EAAE,WAAW;EACtBC,aAAa,EAAE,uBAAuB;EACtCC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AACjB,CAAC;AAGH,IAAMC,GAAG,GAAGlB,aAAa,CAACU,cAAc,CAAC;AACzC,IAAMS,EAAE,GAAGlB,YAAY,CAACiB,GAAG,CAAC;AAC5B,IAAME,QAAQ,GAAGlB,UAAU,CAACiB,EAAE,EAAE,OAAO,CAAC;AAGxC,SAASE,YAAYA,CAAA,EAAG;EACtB,IAAMC,QAAQ,GAAGd,WAAW,EAAE;EAC9B,IAAMe,MAAM,GAAGhB,WAAW,CAAC,UAAAiB,KAAK;IAAA,OAAIA,KAAK,CAACD,MAAM;EAAA,EAAC;EACjD,IAAME,gBAAgB,GAAG,IAAIC,IAAI,EAAE;EACnC,IAAMC,WAAW,GAAGpB,WAAW,CAACqB,cAAc,CAAC;EAE/CnB,SAAS,CAAC,YAAM;IACdoB,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEH,WAAW,CAAC;IAC5D,IAAMI,UAAU,GAAIJ,WAAW,GAAG,EAAE,GAAI,CAAC;IACzCE,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEC,UAAU,CAAC;IAE9D,IAAMC,UAAU;MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;QAC7B,IAAIC,KAAK;QACT,IAAI;UACF,IAAMC,UAAU,GAAGjC,KAAK,CAACiB,QAAQ,EAAEhB,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAEmB,MAAM,CAAC,EAAElB,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,EAAEA,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC,EAAEgC,OAAO,CAACN,UAAU,CAAC,EAAEzB,KAAK,CAAC,EAAE,CAAC,CAAC;UACzJ,IAAMgC,aAAa,SAASF,UAAU,CAACG,GAAG,EAAE;UAC5CJ,KAAK,GAAGG,aAAa,CAACE,IAAI,CAACC,GAAG,CAAC,UAAAC,GAAG,EAAI;YACpC,IAAMC,IAAI,GAAGD,GAAG,CAACE,IAAI,EAAE;YACvB,IAAMC,IAAI,GAAG,CAACpB,gBAAgB,GAAGkB,IAAI,CAACE,IAAI,CAACC,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;YACvE,IAAMC,UAAU,GAAIJ,IAAI,CAACK,KAAK,GAAC,CAAC,GAAGL,IAAI,CAACM,QAAQ,GAAGN,IAAI,CAACO,QAAQ,GAAC,CAAE;YACnE,OAAAC,aAAA,CAAAA,aAAA,KAAWR,IAAI;cAAES,EAAE,EAAEV,GAAG,CAACU,EAAE;cAAEP,IAAI,EAAJA,IAAI;cAAEE,UAAU,EAAVA;YAAU;UAC/C,CAAC,CAAC;UAEFlB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEK,KAAK,CAAC;UACpCkB,QAAQ;UAER,IAAIC,WAAW,GAAGhB,aAAa,CAACE,IAAI,CAACF,aAAa,CAACE,IAAI,CAACe,MAAM,GAAC,CAAC,CAAC;UACjE,OAAOD,WAAW,EAAE;YAClB,IAAME,iBAAiB,SAASrD,KAAK,CAACiB,QAAQ,EAAEhB,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAEmB,MAAM,CAAC,EAAElB,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,EAAEA,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC,EAAEoD,UAAU,CAACH,WAAW,CAAC,EAAEhD,KAAK,CAAC,EAAE,CAAC,CAAC,CAACiC,GAAG,EAAE;YAChL,IAAI,CAACiB,iBAAiB,CAACE,KAAK,EAAE;cAAA,IAAAC,MAAA;cAC5B,IAAMC,SAAS,GAAGJ,iBAAiB,CAAChB,IAAI,CAACC,GAAG,CAAC,UAAAC,GAAG,EAAI;gBAClD,IAAMC,IAAI,GAAGD,GAAG,CAACE,IAAI,EAAE;gBACvB,IAAMC,IAAI,GAAG,CAACpB,gBAAgB,GAAGkB,IAAI,CAACE,IAAI,CAACC,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;gBACvE,IAAMC,UAAU,GAAIJ,IAAI,CAACK,KAAK,GAAC,CAAC,GAAGL,IAAI,CAACM,QAAQ,GAAGN,IAAI,CAACO,QAAQ,GAAC,CAAE;gBACnE,OAAAC,aAAA,CAAAA,aAAA,KAAWR,IAAI;kBAAES,EAAE,EAAEV,GAAG,CAACU,EAAE;kBAAEP,IAAI,EAAJA,IAAI;kBAAEE,UAAU,EAAVA;gBAAU;cAC/C,CAAC,CAAC;cACF,CAAAY,MAAA,GAAAxB,KAAK,EAAC0B,IAAI,CAAAC,KAAA,CAAAH,MAAA,EAAAI,kBAAA,CAAIH,SAAS,EAAC;cACxBN,WAAW,GAAGE,iBAAiB,CAAChB,IAAI,CAACgB,iBAAiB,CAAChB,IAAI,CAACe,MAAM,GAAC,CAAC,CAAC;YACvE,CAAC,MAAM;cACLD,WAAW,GAAG,IAAI;YACpB;UACF;QACF,CAAC,CAAC,OAAOU,KAAK,EAAE;UACdnC,OAAO,CAACmC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC9C;MACF,CAAC;MAAA,gBAlCKhC,UAAUA,CAAA;QAAA,OAAAC,IAAA,CAAA6B,KAAA,OAAAG,SAAA;MAAA;IAAA,GAkCf;IAEFjC,UAAU,EAAE;IAEX,OAAO,YAAM,CAEb,CAAC;EACH,CAAC,EAAE,CAACL,WAAW,EAAEJ,MAAM,EAAEE,gBAAgB,EAAEH,QAAQ,CAAC,CAAC;EAErD,OAAO,IAAI;AACb;AAEA,eAAeD,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}